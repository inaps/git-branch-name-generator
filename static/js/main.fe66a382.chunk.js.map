{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["STORE_KEYS","App","state","taskTitle","localStorage","getItem","typeId","handleInput","e","target","value","setItem","setState","handleSelect","type","options","label","customStyles","control","styles","isFocused","background","boxShadow","border","borderColor","singleValue","color","fontFamily","fontSize","menuList","option","isSelected","cursor","backgroundColor","className","onChange","this","placeholder","defaultValue","defaultTaskTitle","isSearchable","menuPosition","result","commitMessage","find","trim","replace","parsedTaskTitle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kUAIMA,EACI,SADJA,EAEO,YAuIEC,E,4MAnIbC,MAAQ,CACNC,UAAWC,aAAaC,QAAQL,IAAyB,GACzDM,OAAQF,aAAaC,QAAQL,I,EAG/BO,YAAc,SAACC,GAAO,IACNL,EAAaK,EAAEC,OAAtBC,MACPN,aAAaO,QAAQX,EAAsBG,GAE3C,EAAKS,SAAS,CACZT,e,EAIJU,aAAe,SAAAC,GAAS,IACRR,GAAUQ,GAAc,IAA/BJ,MACPN,aAAaO,QAAQX,EAAmBM,GAExC,EAAKM,SAAS,CACZN,Y,EAIJS,QAAU,CACR,CAACL,MAAO,SAAUM,MAAO,UACzB,CAACN,MAAO,UAAWM,MAAO,WAC1B,CAACN,MAAO,SAAUM,MAAO,UACzB,CAACN,MAAO,UAAWM,MAAO,WAC1B,CAACN,MAAO,OAAQM,MAAO,S,EA4BzBC,aAAe,CACbC,QAAS,SAACC,EAAD,OAAUC,EAAV,EAAUA,UAAV,sBACJD,EADI,CAEPE,WAAY,UACZC,UAAW,OACXC,OAAQH,EAAY,oBAAqB,oBACzC,SAAS,eACJD,EAAO,UADZ,CAEEK,YAAa,eAGjBC,YAAa,SAAAN,GAAM,sBACdA,EADc,CAEjBO,MAAO,OACPC,WAAY,YACZC,SAAU,MAEZC,SAAU,SAAAV,GAAM,sBACXA,EADW,CAEdE,WAAY,aAEdS,OAAQ,SAACX,EAAD,OAAUY,EAAV,EAAUA,WAAV,sBACHZ,EADG,CAENO,MAAO,OACPM,OAAQ,UACRC,gBAAiBF,EAAa,UAAY,UAC1C,SAAS,eACJZ,EAAO,UADZ,CAEEc,gBAAiB,gB,uDAMrB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,SAAf,UACA,2BACEA,UAAU,QACVC,SAAUC,KAAK7B,YACf8B,YAAY,aACZC,aAAcF,KAAKG,oBAGvB,yBAAKL,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,SAAf,QACA,kBAAC,IAAD,CACEG,YAAY,OACZG,cAAc,EACdC,aAAa,QACbP,UAAU,aACVf,OAAQiB,KAAKnB,aACbF,QAASqB,KAAKrB,QACduB,aAAcF,KAAKtB,KACnBqB,SAAUC,KAAKvB,iBAIrB,yBAAKqB,UAAU,gBACb,yBAAKA,UAAU,SAAf,UACA,2BAAOA,UAAU,eAAexB,MAAO0B,KAAKM,OAAQL,YAAY,iBAElE,yBAAKH,UAAU,gBACb,yBAAKA,UAAU,SAAf,UACA,2BAAOA,UAAU,eAAexB,MAAO0B,KAAKO,cAAeN,YAAY,wB,2BA5FrE,IAAD,OACT,OAAOD,KAAKrB,QAAQ6B,MAAK,qBAAElC,QAAqB,EAAKR,MAAMI,Y,sCAI3D,OAAO8B,KAAKlC,MAAMC,UAAU0C,OACzBC,QAAQ,KAAM,KACdA,QAAQ,OAAQ,IAChBA,QAAQ,QAAS,KACjBA,QAAQ,UAAW,O,6BAItB,MAAM,GAAN,OAAUV,KAAKtB,KAAL,UAAesB,KAAKtB,KAAKE,MAAzB,KAAoC,IAA9C,OAAmDoB,KAAKW,gBAAkBX,KAAKW,gBAAkB,M,oCAIjG,OAAOX,KAAKlC,MAAMC,UAAU0C,OAAOC,QAAQ,OAAQ,KAAKA,QAAQ,MAAO,MAAMA,QAAQ,KAAM,Q,uCAK3F,OAAO1C,aAAaC,QAAQL,O,GAtDdgD,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fe66a382.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport Select from 'react-select'\n\nconst STORE_KEYS = {\n  typeId: \"typeId\",\n  taskTitle: \"taskTitle\",\n}\n\nclass App extends React.Component {\n  state = {\n    taskTitle: localStorage.getItem(STORE_KEYS.taskTitle) || \"\",\n    typeId: localStorage.getItem(STORE_KEYS.typeId),\n  }\n\n  handleInput = (e) => {\n    const {value: taskTitle} = e.target;\n    localStorage.setItem(STORE_KEYS.taskTitle, taskTitle)\n\n    this.setState({\n      taskTitle\n    })\n  }\n\n  handleSelect = type => {\n    const {value: typeId} = type ? type : {};\n    localStorage.setItem(STORE_KEYS.typeId, typeId);\n\n    this.setState({\n      typeId\n    })\n  }\n\n  options = [\n    {value: \"bugfix\", label: \"bugfix\"},\n    {value: \"feature\", label: \"feature\"},\n    {value: \"hotfix\", label: \"hotfix\"},\n    {value: \"subtask\", label: \"subtask\"},\n    {value: \"task\", label: \"task\"},\n  ]\n\n  get type() {\n    return this.options.find(({value}) => value === this.state.typeId)\n  }\n\n  get parsedTaskTitle() {\n    return this.state.taskTitle.trim()\n      .replace(/ /g, \"-\")\n      .replace('[FE]', \"\")\n      .replace(/-{2}/g, \"-\")\n      .replace(/[/\\\\+]/g, \"-\")\n  }\n\n  get result() {\n    return `${this.type ? `${this.type.label}/` : \"\"}${this.parsedTaskTitle ? this.parsedTaskTitle : \"\"}`\n  }\n\n  get commitMessage() {\n    return this.state.taskTitle.trim().replace('[FE]', \":\").replace(\" : \", \": \").replace(\" :\", \": \")\n  }\n\n\n  get defaultTaskTitle() {\n    return localStorage.getItem(STORE_KEYS.taskTitle)\n  }\n\n  customStyles = {\n    control: (styles, {isFocused}) => ({\n      ...styles,\n      background: \"#585858\",\n      boxShadow: \"none\",\n      border: isFocused ? \"1px solid #a3a3a3\": \"1px solid #737373\",\n      ':hover': {\n        ...styles[':hover'],\n        borderColor: \"#a3a3a3\",\n      },\n    }),\n    singleValue: styles => ({\n      ...styles,\n      color: \"#eee\",\n      fontFamily: \"monospace\",\n      fontSize: 14\n    }),\n    menuList: styles => ({\n      ...styles,\n      background: \"#585858\"\n    }),\n    option: (styles, {isSelected}) =>({\n      ...styles,\n      color: \"#eee\",\n      cursor: \"pointer\",\n      backgroundColor: isSelected ? \"#474747\" : \"#585858\",\n      ':hover': {\n        ...styles[':hover'],\n        backgroundColor: \"#474747\",\n      },\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"contentWrapper\">\n          <div className=\"inputWrapper\">\n            <div className=\"label\">Origin</div>\n            <input\n              className=\"input\"\n              onChange={this.handleInput}\n              placeholder=\"Task title\"\n              defaultValue={this.defaultTaskTitle}\n            />\n          </div>\n          <div className=\"form\">\n            <div className=\"inputWrapper\">\n              <div className=\"label\">type</div>\n              <Select\n                placeholder=\"Type\"\n                isSearchable={false}\n                menuPosition=\"fixed\"\n                className=\"selectType\"\n                styles={this.customStyles}\n                options={this.options}\n                defaultValue={this.type}\n                onChange={this.handleSelect}\n              />\n            </div>\n          </div>\n          <div className=\"inputWrapper\">\n            <div className=\"label\">branch</div>\n            <input className=\"input result\" value={this.result} placeholder=\"Branch name\" />\n          </div>\n          <div className=\"inputWrapper\">\n            <div className=\"label\">commit</div>\n            <input className=\"input result\" value={this.commitMessage} placeholder=\"Commit message\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}